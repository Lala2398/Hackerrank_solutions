#Hackerrank 
#Python Basic Certification Exam 

#Question 1 : Average Function 

#!/bin/python3

import math
import os
import random
import re
import sys


# Define the avg function
def avg(*nums):
    return sum(nums) / len(nums)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    
    # Take input as a list of integers
    nums = list(map(int, input().split()))
    
    # Call the avg function with unpacked list
    res = avg(*nums)
    
    # Write the result formatted to 2 decimal places
    fptr.write('%.2f' % res + '\n')

    fptr.close()
    
    


#Question 2 : Multiset Implementation 


#Question form : 

#!/bin/python3

import math
import os
import random
import re
import sys


class Multiset:

    def add(self, val):
        # adds one occurrence of val from the multiset, if any
        pass

    def remove(self, val):
        # removes one occurrence of val from the multiset, if any
        pass

    def __contains__(self, val):
        # returns True when val is in the multiset, else returns False
        return False
    
    def __len__(self):
        # returns the number of elements in the multiset
        return 0
if __name__ == '__main__':
    def performOperations(operations):
        m = Multiset()
        result = []
        for op_str in operations:
            elems = op_str.split()
            if elems[0] == 'size':
                result.append(len(m))
            else:
                op, val = elems[0], int(elems[1])
                if op == 'query':
                    result.append(val in m)
                elif op == 'add':
                    m.add(val)
                elif op == 'remove':
                    m.remove(val)
        return result

    q = int(input())
    operations = []
    for _ in range(q):
        operations.append(input())

    result = performOperations(operations)
    
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')
    fptr.close()
    
    
#Answer 



#!/bin/python3

import math
import os
import random
import re
import sys

class Multiset:
    def __init__(self):
        # Initialize the multiset as a dictionary to store element counts
        self.elements = {}

    def add(self, val):
        # Add one occurrence of val to the multiset
        if val in self.elements:
            self.elements[val] += 1
        else:
            self.elements[val] = 1

    def remove(self, val):
        # Remove one occurrence of val from the multiset, if present
        if val in self.elements:
            if self.elements[val] > 1:
                self.elements[val] -= 1
            else:
                del self.elements[val]

    def __contains__(self, val):
        # Return True if val is in the multiset, else False
        return val in self.elements

    def __len__(self):
        # Return the number of elements in the multiset (including duplicates)
        return sum(self.elements.values())

if __name__ == '__main__':
    def performOperations(operations):
        m = Multiset()
        result = []
        for op_str in operations:
            elems = op_str.split()
            if elems[0] == 'size':
                result.append(len(m))
            else:
                op, val = elems[0], int(elems[1])
                if op == 'query':
                    result.append(val in m)
                elif op == 'add':
                    m.add(val)
                elif op == 'remove':
                    m.remove(val)
        return result

    q = int(input())
    operations = []
    for _ in range(q):
        operations.append(input())

    result = performOperations(operations)
    
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')
    fptr.close()
    
    

